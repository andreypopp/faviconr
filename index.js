// Generated by CoffeeScript 1.6.3
/*

  Faviconr

  Andrey Popp (c) 2013
*/

var checkRel, express, hyperquest, memoized, parseFavicon, resolveFavicon, resolveURL, sax, url,
  __slice = [].slice;

url = require('url');

express = require('express');

hyperquest = require('hyperquest');

sax = require('sax');

checkRel = function(v) {
  return v === 'icon' || v === 'shortcut' || v === 'shortcut icon' || v === 'icon shortcut';
};

parseFavicon = function(cb) {
  var parser, seen;
  parser = sax.createStream(false);
  seen = false;
  parser.on('error', function(err) {
    return cb(err);
  });
  parser.on('opentag', function(node) {
    if (node.name === 'LINK' && checkRel(node.attributes.REL)) {
      seen = true;
      return cb(null, node.attributes.HREF);
    }
  });
  parser.on('end', function(node) {
    if (!seen) {
      return cb(null);
    }
  });
  return parser;
};

resolveURL = function(uri, cb) {
  return hyperquest.get({
    uri: uri
  }, function(err, response) {
    if (err) {
      return cb(err);
    }
    if (/3\d\d/.exec(response.statusCode)) {
      return resolveURL(response.headers.location, cb);
    } else if (/2\d\d/.exec(response.statusCode)) {
      return cb(null, uri);
    } else {
      return cb(null);
    }
  });
};

resolveFavicon = function(uri, cb) {
  var host, protocol, _ref;
  _ref = url.parse(uri), host = _ref.host, protocol = _ref.protocol;
  return resolveURL("" + protocol + "//" + host + "/favicon.ico", function(err, icon) {
    if (icon) {
      return cb(null, icon);
    } else {
      return hyperquest({
        uri: uri,
        method: 'GET'
      }).pipe(parseFavicon(function(err, icon) {
        if (err) {
          return cb(err);
        } else if (!icon) {
          return cb(null);
        } else {
          icon = url.resolve(uri, icon);
          return cb(null, icon);
        }
      }));
    }
  });
};

memoized = function(func) {
  var cache;
  cache = {};
  return function() {
    var args, cb, _i;
    args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
    if (cache[args] != null) {
      return cb(null, cache[args]);
    }
    return func.apply(null, __slice.call(args).concat([function(err, result) {
      if (!err) {
        cache[args] = result;
      }
      return cb(err, result);
    }]));
  };
};

module.exports = function() {
  var app, resolveFaviconMemoized;
  resolveFaviconMemoized = memoized(resolveFavicon);
  app = express();
  app.get('/', function(req, res) {
    if (req.query.url == null) {
      return res.send(400, 'provide URL as url param');
    }
    return resolveFaviconMemoized(req.query.url, function(err, icon) {
      if (err || !icon) {
        return res.send(404);
      } else {
        return res.send(icon);
      }
    });
  });
  return app;
};

module.exports.makeApp = module.exports;

module.exports.resolveFavicon = resolveFavicon;

module.exports.parseFavicon = parseFavicon;
